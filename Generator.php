<?php

namespace Mygento\Discount\Generator;

class Generator
{
    /** @var \Mygento\Discount\Generator\Source */
    protected $source;
    protected $platform;
    protected $code;
    protected $classObject;
    protected $class = 'Discount';

    public function generate()
    {
        switch ($this->platform) {
            case 'm2':
                $this->m2();
                break;
            case 'm1':
                $this->m1();
                break;
            default:
                break;
        }
    }

    public function m2()
    {
        $namespace         = new \Nette\PhpGenerator\PhpNamespace('Mygento\Base\Helper');
        $this->classObject = $namespace->addClass($this->class);
        $this->classObject->addComment("Autogenerated class.\n");

        //CONST
        $this->classObject->setConstants($this->source::getConstants());

        //PROPERTIES
        foreach ($this->source::getProtectedProperties() as $property) {
            $this->classObject->addProperty($property['name'], $property['value'])
                ->setVisibility('protected')
                ->addComment($property['comment']);
        }

        //CONSTRUCT
        $this->classObject->addMethod('__construct')
            ->addComment('@param \Mygento\Base\Helper\Data $baseHelper')
            ->setBody('$this->generalHelper = $baseHelper;')
            ->addParameter('baseHelper')
            ->setTypeHint('\Mygento\Base\Helper\Data');

        //METHODS
        $this->addMethodToClass('getRecalculated');
        $this->addMethodToClass('applyDiscount');
        $this->addMethodToClass('getGlobalDiscount');
        $this->addMethodToClass('preFixLowDiscount');
        $this->addMethodToClass('postFixLowDiscount');
        $this->addMethodToClass('getDiscountIncrement');
        $this->addMethodToClass('setSimplePrices');
        $this->addMethodToClass('buildFinalArray');
        $this->addMethodToClass('_buildItem');
        $this->addMethodToClass('getProcessedItem');
        $this->addMethodToClass('getShippingName');
        $this->addMethodToClass('_checkReceipt');
        $this->addMethodToClass('isValidItem');
        $this->addMethodToClass('slyFloor');
        $this->addMethodToClass('slyCeil');
        $this->addMethodToClass('addTaxValue');
        $this->addMethodToClass('checkSpread');
        $this->addMethodToClass('getDecimalsCountAfterDiv');
        $this->addMethodToClass('getAllItems');
        $this->addMethodToClass('setIsSplitItemsAllowed');
        $this->addMethodToClass('setDoCalculation');
        $this->addMethodToClass('setSpreadDiscOnAllUnits');

        file_put_contents('./target/Discount.php', "<?php \n" . $this->source->getCopyright());
        file_put_contents('./target/Discount.php', $namespace, FILE_APPEND);
        //TODO: Run PHPCBF on the new file
    }

    public function m1()
    {
        $this->classObject = new \Nette\PhpGenerator\ClassType($this->class);
        $this->classObject->addComment("Autogenerated class.\n");
        $this->classObject->setExtends('Mage_Core_Helper_Abstract');

        //CONST
        $this->classObject->setConstants($this->source::getConstants());

        //PROPERTIES
        foreach ($this->source::getProtectedProperties() as $property) {
            $this->classObject->addProperty($property['name'], $property['value'])
                ->setVisibility('protected')
                ->addComment($property['comment']);
        }
        $this->classObject
            ->getProperty('_code')
            ->setValue($this->code);

        //METHODS
        $this->addMethodToClass('getRecalculated');
        $this->addMethodToClass('applyDiscount');
        $this->addMethodToClass('getGlobalDiscount');
        $this->addMethodToClass('preFixLowDiscount');
        $this->addMethodToClass('postFixLowDiscount');
        $this->addMethodToClass('getDiscountIncrement');
        $this->addMethodToClass('setSimplePrices');
        $this->addMethodToClass('buildFinalArray');
        $this->addMethodToClass('_buildItem');
        $this->addMethodToClass('getProcessedItem');
        $this->addMethodToClass('getShippingName');
        $this->addMethodToClass('_checkReceipt');
        $this->addMethodToClass('isValidItem');
        $this->addMethodToClass('slyFloor');
        $this->addMethodToClass('slyCeil');
        $this->addMethodToClass('addTaxValue');
        $this->addMethodToClass('checkSpread');
        $this->addMethodToClass('getDecimalsCountAfterDiv');
        $this->addMethodToClass('getAllItems');
        $this->addMethodToClass('setIsSplitItemsAllowed');
        $this->addMethodToClass('setDoCalculation');
        $this->addMethodToClass('setSpreadDiscOnAllUnits');

        $path    = explode('_', $this->class);
        $package = $path[0] . '_' . ($path[1] ?? 'Base');

        file_put_contents('./target/Discount.php', "<?php \n" . $this->source->getCopyright($package));
        file_put_contents('./target/Discount.php', $this->classObject, FILE_APPEND);
        //TODO: Run PHPCBF on the new file
    }

    protected function addCommentsToMethod(\Nette\PhpGenerator\Method $method, $comments)
    {
        if (is_string($comments)) {
            $comments = str_replace("\n            ", "\n", $comments);
            $method->addComment($comments);
        } elseif (is_array($comments)) {
            foreach ($comments as $comment) {
                $method->addComment($comment);
            }
        }
    }

    protected function addParamsToMethod(\Nette\PhpGenerator\Method $method, array $params)
    {
        foreach ($params as $name => $val) {
            $p = $method->addParameter($name);
            if ($val === 'none') {
                continue;
            }
            $p->setDefaultValue($val);
        }
    }

    protected function addMethodToClass($method)
    {
        $methodSourceName = 'getMethod_' . $method;
        $methodData       = $this->source->$methodSourceName();

        $methodData['body'] = str_replace("\n            ", "\n", $methodData['body']);

        $methodObject     =
            $this->classObject
                ->addMethod($method)
                ->setBody($methodData['body'])
                ->setVisibility($methodData['visibility'] ?? 'public');
        $this->addCommentsToMethod($methodObject, $methodData['comments']);
        $this->addParamsToMethod($methodObject, $methodData['params']);
    }

    /**
     * @param mixed $platform
     */
    public function setPlatform($platform)
    {
        $this->platform = $platform;
    }

    /**
     * @param mixed $source
     */
    public function setSource($source)
    {
        $this->source = new $source;
    }

    /**
     * @param mixed $code
     */
    public function setCode($code)
    {
        $this->code = $code;
    }

    /**
     * @param mixed $code
     */
    public function setClass($class)
    {
        $this->class = $class;
    }
}
